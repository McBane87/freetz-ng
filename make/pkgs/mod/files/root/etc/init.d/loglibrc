# Logging functions for the shell-scripts


loglib_console() {
	local loglib_SVC="$(echo $1 | tr '[:lower:]' '[:upper:]')"
	shift
	while [ ${#loglib_SVC} -lt 13 ]; do loglib_SVC=" $loglib_SVC  "; done
	echo -e "\033[94m[FREETZ]\033[m \033[33m${loglib_SVC:0:13}\033[m $*" >/dev/console
	echo "$(date '+%F %T') [ ${loglib_SVC:0:13} ] $*" >>/var/log/freetz.log
}

loglib_logger() {
	local loglib_SVC="$(echo $1 | tr '[:lower:]' '[:upper:]')"
	shift
	logger -p 3.5 -t "FREETZ" "[$loglib_SVC] $*"
}

loglib_system() {
	loglib_console "$@"
	loglib_logger "$@"
}

loglib_log() {
	local _DAEMON_LONG_NAME=$1
	local _logfile=$2
	local _log="$3"

	if [ -z "$_log" ] || [ -z "$_logfile" ] || [ ! -w $(dirname "$_logfile") ]; then 
		return
	fi

	# This results in the PID of the main script. (The one outside this function)
	# But only if this not becomes a subshell. In this case it would hold the PID of this subshell.
	local xpid=$(exec sh -c 'echo "$PPID"')
	local fd_stdout="$(stat -L -c "%d:%i" /proc/$xpid/fd/1 2>/dev/null)"
	local fd_logfile="$(stat -L -c "%d:%i" $_logfile 2>/dev/null)"

	loglib_system "$_DAEMON_LONG_NAME" "$_log"
	echo "$_log"

	# If we are not already redirect any stdout to logfile, then,
	# additionally, add log to logfile.
	if [ "$fd_stdout" != "$fd_logfile" ]; then
		echo "$_log" >> "$_logfile"
	fi
}
