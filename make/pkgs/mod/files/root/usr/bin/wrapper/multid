#!/bin/sh

. /etc/init.d/loglibrc
LOG_PIPE="/var/log/mod_pipes/log_multid"

# Very important!
#   $LOG_PIPE is provided and processed by freetzlogd.
#   We need to make sure it is running before we start to log.
#   If nothing is listining, on the other end of $LOG_PIPE, and we send a log message,
#   it (this script/process) will block until finally some process will read the message.
/etc/init.d/rc.freetzlogd start_from_daemon &>/dev/null
i=0; while [ ! -p "$LOG_PIPE" ] && [ $i -lt 10 ]; do
	sleep 1; i=$(($i+1))
done

if [ ! -p "$LOG_PIPE" ]; then
	msg="Starting multid ... failed. ($LOG_PIPE does not exist. Please check freetzlogd.)"
	loglib_system "AVM-MULTID" "$msg"
	echo "$msg" >> /var/log/mod_net.log
	exit 1
fi

# Log every output, within this process, to given file/pipe.
# This, automatically, gets inherited by all following process, that are called with exec.
exec &> "$LOG_PIPE"

daemon_mode=start
while [ $# -gt 0 ]; do
	[ "$1" == "-s" ] && daemon_mode="stop"
	[ "$1" == "-I" ] && daemon_mode="reload"
	shift
done

if [ "$daemon_mode" == "start" ]; then
	for dns_pkg in bind dnsmasq unbound; do
		if [ -e /mod/etc/init.d/rc.$dns_pkg ]; then
			rc="/mod/etc/init.d/rc.$dns_pkg"
		else
			rc="/etc/init.d/rc.$dns_pkg"
		fi
		if [ "$($rc status 2>/dev/null)" == "stopped" ]; then
			$rc multid 2>&1
		fi
	done
fi

#[ "$daemon_mode" == "start" -a  "$(/etc/init.d/rc.multid status)" == "running" ] && daemon_mode=reload
exec /etc/init.d/rc.multid $daemon_mode

